<?php
namespace modules\dictionary\services;

use common\auth\rbac\Rbac;
use common\auth\repositories\UserRepository;
use modules\dictionary\forms\AdminCenterForm;
use modules\dictionary\models\AdminCenter;
use modules\dictionary\models\DictSchedule;
use modules\dictionary\models\ScheduleVolunteering;
use modules\dictionary\repositories\AdminCenterRepository;
use modules\dictionary\repositories\DictScheduleRepository;
use modules\dictionary\repositories\JobEntrantRepository;
use modules\usecase\ServicesClass;
use olympic\models\auth\AuthAssignment;
use yii\base\Model;


class AdminCenterService extends ServicesClass
{
    private $jobEntrantRepository;
    private $userRepository;
    const ROLE = 'volunteering-admin';

    public function __construct(AdminCenterRepository $repository,
                                JobEntrantRepository $jobEntrantRepository,
                                UserRepository $userRepository,
                                AdminCenter $model)
    {
        $this->repository = $repository;
        $this->jobEntrantRepository = $jobEntrantRepository;
        $this->userRepository = $userRepository;
        $this->model = $model;
    }

    public function create(Model $form)
    {
        /** @var  AdminCenterForm  $form*/
        $model = parent::create($form); // TODO: Change the autogenerated stub
        $this->addRole($model->job_entrant_id);
        return $model;
    }

    public function edit($id, Model $form)
    {
        /** @var  AdminCenterForm  $form*/
        parent::edit($id, $form); // TODO: Change the autogenerated stub
        $this->addRole($form->job_entrant_id);
    }

    /**
     * @param $id
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function remove($id)
    {
        $model = $this->repository->get($id);
        $jobEntrant = $this->jobEntrantRepository->get($model->job_entrant_id);
        if($auth = AuthAssignment::findOne(['user_id'=>$jobEntrant->user_id, 'item_name'=>self::ROLE])) {
            $auth->delete();
        }
        parent::remove($id); // TODO: Change the autogenerated stub
    }

    private function addRole($id) {
        $jobEntrant = $this->jobEntrantRepository->get($id);
        $user = $this->userRepository->get($jobEntrant->user_id);
        $role = self::ROLE;
        if ($user){
            if(!AuthAssignment::findOne(['user_id'=>$user->id, 'item_name'=>$role])) {
                $user->setAssignmentFirst($role);
            }
        }
    }
}
