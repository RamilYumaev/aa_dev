<?php
namespace modules\entrant\modules\ones\model;

use yii\db\ActiveRecord;

/**
 * @property int $id
 * @property int $cg_id
 * @property string $fio
 * @property string $snils_or_id
 * @property string|null $exam_1
 * @property integer|null $ball_exam_1
 * @property string|null $exam_2
 * @property integer|null $ball_exam_2
 * @property string|null $exam_3
 * @property integer|null $ball_exam_3
 * @property integer|null $priority
 * @property integer $mark_ai
 * @property integer $status
 * @property string $number
 * @property string $sum_ball
 *
 * @property-read  CompetitiveGroupOnes $competitiveGroup
 */
class CompetitiveList extends ActiveRecord
{
    const STATUS_NEW = 0;
    const STATUS_SUCCESS = 1;
    const STATUS_NO_SUCCESS = 2;
    const STATUS_SEMI_PASS = 3;
    const STATUS_RETURN = 4;



    public static function tableName(): string
    {
        return '{{%competitive_list_ones}}';
    }

    public function rules()
    {
        return [
            [['fio',
                'ball_exam_1',
                'mark_ai',
                'priority',
                'snils_or_id',
                'cg_id',
                'exam_1',], 'required'],
            [[
                'status', 'cg_id',
                'number',
                'ball_exam_2',
                'ball_exam_3',
                'sum_ball',], 'integer'],
            [['fio',
                'snils_or_id','exam_1',
                'exam_2',
                'exam_3',], 'string'],
        ];
    }

    public function beforeSave($insert)
    {
        if($this->isNewRecord) {
            $this->status = self::STATUS_NEW;
        }
        $this->sum_ball = $this->mark_ai +
            $this->ball_exam_1 +
            $this->ball_exam_3 +
            $this->ball_exam_2;

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            "cg_id" => "КГ ИД",
            'exam_1' => 'ВИ 1',
            'exam_2' => 'ВИ 2',
            'exam_3' => 'ВИ 3',
            "snils_or_id" => "СНИЛС/Уникальный номер",
            'ball_exam_1' => 'Балл за ВИ 1',
            'ball_exam_2' => 'Балл за ВИ 2',
            'ball_exam_3' => 'Балл за ВИ 3',
            'mark_ai' => 'Балл за ИД',
            'sum_ball' => "Сумма баллов",
            'priority' => "Приоритет",
            'status' => 'Статус',
            'fio' => 'ФИО',
            'number' => "Порядковый номер",
            'statusName' => 'Статус'
        ];
    }

    public function getSubjectMarks() {
        return $this->exam_1 ." - ". $this->ball_exam_1. PHP_EOL.
            $this->exam_2 ." - ". $this->ball_exam_2. PHP_EOL.
            $this->exam_3 ." - ". $this->ball_exam_3;
    }

    public function getCompetitiveGroup() {
        return $this->hasOne(CompetitiveGroupOnes::class, ['id' => 'cg_id']);
    }

    public static function listStatuses()
    {
        return [
            self::STATUS_NEW => "Необработно",
            self::STATUS_SUCCESS => "Прошел",
            self::STATUS_NO_SUCCESS => "Не прошел",
            self::STATUS_SEMI_PASS => "Полупроходной",
            self::STATUS_RETURN => "Забрал заявление"
        ];
    }

    public static function isOnOtherSuccess($snils, $id) {
        return self::find()
            ->andWhere(['and', ['snils_or_id' => $snils,
                'status' => CompetitiveList::STATUS_SUCCESS], ['not', ['id' => $id]]])->exists();

    }

    public function getStatusName() {
        return self::listStatuses()[$this->status];
    }
}
