<?php

namespace modules\transfer\models;

use borales\extensions\phoneInput\PhoneInputValidator;
use common\auth\models\User;
use modules\entrant\components\MaxDateValidate;
use modules\entrant\helpers\DateFormatHelper;
use modules\transfer\behaviors\FileBehavior;
use Yii;

/**
 * This is the model class for table "personal_entity_transfer".
 *
 * @property int $id
 * @property int $user_id
 * @property string $postcode
 * @property string|null $series Серия
 * @property string|null $number Номер
 * @property string|null $date_of_issue Дата выдачи
 * @property string|null $authority Кем выдан
 * @property string $phone
 * @property string|null $region Регион
 * @property string|null $district Район
 * @property string|null $city Город
 * @property string|null $village Посёлок
 * @property string|null $street Улица
 * @property string|null $house Дом
 * @property string|null $housing Корпус
 * @property string|null $building Строение
 * @property string|null $flat Квартира
 * @property string|null $surname Фамилия
 * @property string|null $name Имя
 * @property string|null $patronymic Отчество
 * @property string|null $division_code Код подразделения
 *
 * @property User $user
 */
class PersonalEntityTransfer extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'personal_entity_transfer';
    }

    public function behaviors()
    {
        return [FileBehavior::class];
    }

    public function rules()
    {
        return [
            [[ 'series',
                'number', 'date_of_issue', 'authority', 'postcode', 'phone',], 'required'],
            [['series',],'string', 'max' => 4],
            [['series', 'number', 'date_of_issue', 'authority', 'postcode',  'phone',
            ],'string'],
            [['surname', 'name', 'patronymic',],'string', 'max' => 255],
            [['surname', 'name', 'patronymic',], 'match', 'pattern' => '/^[а-яёА-ЯЁ\-\s]+$/u',
                'message' => 'Значение поля должно содержать только буквы кириллицы пробел или тире'],
            [['surname', 'name'], 'required',],
            [['division_code'], 'string', 'max' => 7],
            [['postcode', 'region', 'district', 'city', 'village', 'street', 'house',
                'housing', 'building', 'flat'],
                'string', 'max' => 255],
            [['authority'], 'string', 'max' => 255],
            [['number'], 'string', 'max' => 15],
            [['date_of_issue',], 'safe'],
            [['date_of_issue'], 'date', 'format' => 'dd.mm.yyyy'],
            [['date_of_issue'], MaxDateValidate::class],
            [['phone'], 'string', 'max' => 25],
            [['phone'], PhoneInputValidator::class],
        ];
    }


    public function attributeLabels()
    {
        return [
            'patronymic' => 'Отчество',
            'surname' => "Фамилия",
            'name' => 'Имя',
            'series'=>'Серия паспорта',
            'number'=>'Номер паспорта',
            'division_code' => 'Код подразделения',
            'date_of_issue'=>'Дата выдачи паспорта',
            'authority'=>'Кем выдан паспорт',
            'phone' => 'Контактный телефон',
            'postcode' => 'Индекс',
            'region' => "Регион",
            'district' => "Район",
            'city' => "Город",
            'village' => "Посёлок",
            'street' => "Улица",
            'house' => "Дом",
            'housing' => "Корпус",
            'building' =>"Строение",
            'flat' => "Квартира",
        ];
    }
    public function beforeSave($insert)
    {
        $this->date_of_issue =  DateFormatHelper::formatRecord($this->date_of_issue);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    public function getValue($property){
        if ($property == "date_of_issue") {
            return DateFormatHelper::formatView($this->$property);
        }
        return $this->$property;
    }

    protected function getProperty($property){
        return $this->getAttributeLabel($property).": ".$this->getValue($property);
    }
    protected function getPropertyAddress($property){
        return $this->attributeLabelsAddress()[$property]." ".$this->getValue($property);
    }


    public function getDataFull(){
        $string = "";
        foreach ($this->getAttributes(null,['user_id','id']) as  $key => $value) {
            if($value) {
                $string .= $this->getProperty($key)." ";
            }
        }
        return $string;
    }

    public function getFio()
    {
        if (!empty($this->surname) && !empty($this->surname) && !empty($this->patronymic)) {
            return $this->surname . " " . $this->name . " " . $this->patronymic;
        } elseif (!empty($this->surname) && !empty($this->name)) {
            return $this->surname . " " . $this->name;
        }
        return null;
    }

    public function getAddress(){
        $string = "";
        foreach ($this->getAttributes(null,[  'patronymic', 'user_id','id',
            'surname',
            'name',
            'series',
            'number',
            'division_code',
            'date_of_issue',
            'authority',
            'phone',]) as  $key => $value) {
            if($value) {
                $string .= $this->getPropertyAddress($key).", ";
            }
        }
        return $string;
    }

    public function attributeLabelsAddress()
    {
        return [
            'postcode' => '',
            'region' => "",
            'district' => "",
            'city' => "",
            'village' => "",
            'street' => "",
            'house' => "",
            'housing' => "",
            'building' =>"",
            'flat' => "кв ",
        ];
    }

    public function getFiles() {
        return $this->hasMany(File::class, ['record_id'=> 'id'])->where(['model'=> self::class]);
    }

    public function countFiles() {
        return $this->getFiles()->count();
    }
    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }
}
